# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import balance_pb2 as balance__pb2


class BalanceServiceStub(object):
  """The Balance RPC Service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getBalance = channel.unary_unary(
        '/BalanceService/getBalance',
        request_serializer=balance__pb2.Id.SerializeToString,
        response_deserializer=balance__pb2.Balance.FromString,
        )
    self.adjustBalance = channel.unary_unary(
        '/BalanceService/adjustBalance',
        request_serializer=balance__pb2.BalanceAdjustment.SerializeToString,
        response_deserializer=balance__pb2.Balance.FromString,
        )


class BalanceServiceServicer(object):
  """The Balance RPC Service
  """

  def getBalance(self, request, context):
    """get a balance by token
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def adjustBalance(self, request, context):
    """adjust a balance
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BalanceServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getBalance': grpc.unary_unary_rpc_method_handler(
          servicer.getBalance,
          request_deserializer=balance__pb2.Id.FromString,
          response_serializer=balance__pb2.Balance.SerializeToString,
      ),
      'adjustBalance': grpc.unary_unary_rpc_method_handler(
          servicer.adjustBalance,
          request_deserializer=balance__pb2.BalanceAdjustment.FromString,
          response_serializer=balance__pb2.Balance.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'BalanceService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
